
package core;
/**
 * CheckersComputerPlayer Class plays a computer-generated move for CheckersTextConsole.
 *
 * @author Steven Kosanke, skosanke
 * @version 2/07/2022
 */
public class CheckersComputerPlayer {

    CheckersLogic board;
    /**
     * Constructor
     * @param board the board scenario
     */
    public CheckersComputerPlayer(CheckersLogic board) {
        this.board = board;
    }

    /**
     * Method that looks for possible moves on board and returns a valid move for computer player "O".
     * @return The return move the computer will make.
     * @throws NullPointerException if next move was never initialized
     */
    public String getNextMove() throws NullPointerException {
        //Jump right
        int[] output = new int[4];
        for (int i=5; i>=0; i--) {
            for (int j=6; j>0; j--){
                if (board.getSpace(i, j).equals("O")) {
                    if(board.getSpace(i+1, j+1).equals("X") && board.getSpace(i+2, j+2).equals("_")){
                        output[0]=i; output[1]=j; output[2]=i+2; output[3]=j+2;
                        return convertToMove(output);

                    }
                }
            }
        } //end for i loop
        //Jump Left
        for (int i=5; i>=0; i--) {
            for (int j=8; j>2; j--){
                if (board.getSpace(i, j).equals("O")) {
                    if(board.getSpace(i+1, j-1).equals("X") && board.getSpace(i+2, j-2).equals("_")){
                        output[0]=i; output[1]=j ;output[2]=i+2; output[3]=j-2;
                        return convertToMove(output);

                    }
                }
            }
        } //end of jumps

         for (int i=6; i>=0; i--) {
            for (int j=8; j>1; j--){
                if (board.getSpace(i, j).equals("O")) {
                    if(board.getSpace(i+1, j-1).equals("_")) {
                        output[0]=i; output[1]=j ;output[2]=i+1; output[3]=j-1;
                        return convertToMove(output);
                    }//move left
                }
            }
        }
         for (int i=6; i>0; i--) {
            for (int j=7; j>0; j--){
                if (board.getSpace(i, j).equals("O")) {
                    if(board.getSpace(i+1, j+11).equals("_")) {
                        output[0]=i; output[1]=j ;output[2]=i+1; output[3]=j+1;
                        return convertToMove(output);
                    }//move right
                }
            }
        }
         if (output[0] != output[0]) {
             throw new NullPointerException ("Computer output array error.");
         }
         return convertToMove(output);
    }

    /**
     * Method used exclusively by getNextMove() method to convert a coordinate to a valid board move.
     * @param output move generated by getNextMove() method
     * @return String board move in format #a-#b
     */
    private String convertToMove(int[] output) {
        String returnOut;
        String a = board.getSpace(output[0], 0);
        String b = board.getSpace(8, output[1]);
        String c = board.getSpace(output[2], 0);
        String d = board.getSpace(8, output[3]);
        returnOut = a + b + "-" + c + d;
        return returnOut;
    }
}
